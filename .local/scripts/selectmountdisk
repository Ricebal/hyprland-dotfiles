#!/bin/sh

# TODO: Fix sudo priv
# CONST
MOUNTPOINT_DIR="/run/media/$(whoami)"
CONFIG_PATH="$HOME/.config/selectmountdisk/config"

# Functions
function mount_disk() {
  available_disks=$(lsblk -lp | awk '{ if ($6 == "part" && !$7) print $1 " (" $4 ")" }')
  [[ $available_disks = "" ]] && notify-send -t 5000 "Select Mount Disk" "No disks available" && exit 1
  chosen=$(echo -e $available_disks | sed -E 's/\) /)\n/g' | wofi -d -p "Select disk to mount" | awk '{ print $1 }')
  [[ $chosen = "" ]] && exit 1
  load_config
  available_dirs="${PRESET_NAMES} $(ls $MOUNTPOINT_DIR)"
  chosen_dir=$(echo $available_dirs | tr ' ' '\n' | uniq | wofi -d -i -p "Choose a directory")
  [[ $chosen_dir = "" ]] && notify-send -t 5000 "Select Mount Disk" "Invalid mountpoint" && exit 1
  mount_path="$MOUNTPOINT_DIR/$chosen_dir"
  if [[ ! -d "$mount_path" ]]; then
    mkdir_prompt=$(echo -e "No\nYes" | wofi -d -p "Directory doesn't exist, create it?")
    [[ "$mkdir_prompt" = "Yes" ]] && sudo mkdir -p $mount_path
  fi
  sudo mount $chosen $mount_path && notify-send -t 5000 "Select Mount Disk" "$chosen mounted on $mount_path" && exit 0
}

function unmount_disk() {
  available_disks=$(lsblk -lp | grep "$MOUNTPOINT_DIR" | awk '{ print $1" on "$7 }')
  [[ $available_disks = "" ]] && notify-send -t 5000 "Select Mount Disk" "No mounted disks" && exit 1
  chosen=$(echo -e $available_disks | sed -E 's/\) /)\n/g' | wofi -d -p "Select disk to unmount")
  [[ $chosen = "" ]] && exit 1
  chosen_disk=$(echo "$chosen" | awk '{ print $1 }')
  sudo umount $chosen_disk && notify-send -t 5000 "Select Mount Disk" "Unmounted $chosen" && exit 0
}

function load_config() {
  if [ -f "$CONFIG_PATH" ]; then
    set -o allexport; source $CONFIG_PATH; set +o allexport;
  fi
}

# Entrypoint
selection="$(echo -e "mount\nunmount" | wofi -d -p "Select action")"

case $selection in
  mount) mount_disk ;;
  unmount) unmount_disk ;;
  *) notify-send -t 5000 "Select Mount Disk" "Unsupported action" && exit 1 ;;
esac
